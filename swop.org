* Eerste iteratie
** Eerste sessie
- mogen we libraries gebruiken?
    Ja
    Zeker:
        - Guava: pure collections
        - Yaml:

- wat voor documentatie schrijven we nu?
    OGP, maar informeel.

- welke diagrammen moeten we maken?
    - Hoog niveau: class diagram
    - Momenteel geen domain model (gegeven)
    - Inzoomen:
        - class diagram
        - sequence diagram
        ²

    Zorg dat we ons design kunnen 'verkopen'


- Hoe zit het met de UML die we nu hebben?


- Moeten we een sequence diagram maken voor elke use-case?
    Nope, maar wel van de interne werking.
    Gewoon geen letterlijke vertaling van de opgave.
- Moeten we nog iets doen met dat domain model?
    Nee, dat is gegeven voor deze iteratie

** Tweede sessie
- Vragen
  - Recursief falen?
    Nee
  - Lazy evaluation van alles ivm tijd?
    NOPE
  - Performed-during, is dat een clock of is dat één begin en één einde?
    één begin en één einde
  - Wie beslist er over de status verandering? Task, status, of nog iets anders?

- Beslissingen
  - Depends on is NIET bidirectioneel
  - Ultimate time travel: events en time traveling object - nope!

- Bij assistent geleerd:
  - facade controller
  - session controller
  - UI interface

** Derde sessie

- Wanneer moeten lijsten 'immutable' worden?
  - Overal, ook intern
  Gebeurt dit als we Project.getTasks() doen vanuit het domain zelf?
  Doet de facade controller dat als hij de lijst door geeft aan de sessioncontroller?
  Of wordt de bescherming pas gedaan als de sessionController de lijst door geeft aan de userInterface?
  - Interne collecties worden best steeds afgeschermd (dus de interne collectie van taken in een object van de klasse Project mag buiten dat object nergens aangepast kunnen worden, ook niet binnen jullie domein). Je kan dat doen door immutable lists te gebruiken of door steeds te kopieren bij setten en getten.

- Verder, als we een lijst van Tasks willen van een Project in de sessionController. Vraagt de sessionController dan rechtstreeks aan het Project voor deze lijst? Of is het beter dat de FacadeController een functie 'getTasksForProject(Project)' heeft die dan op zijn beurt vraagt aan het meegegeven project voor de lijst van tasks?
- Er is hier geen beste oplossing. Je zal hier een evenwicht moeten zoeken. Let wel op dat jullie klasse FacadeController niet gigantisch wordt. Wees per klasse echter wel consistent in je keuze.

- Als laatste was er een zeker discutie over hoe de sessionController te structureren. Momenteel hebben we één functie per use-case in een classe 'SessionController'. Alternatief kunnen we verschillende klassen laten overerven van SessionController, één sub-classe per use-case. De meningen zijn een beetje verdeeld over wat het gemakkelijkste in gebruik is, en wat het beste design is. Wat is u mening hierover?
- Beide zijn waardige alternativen, ze kunnen beide goed zijn. Belangrijk is wel dat als er in alle use cases gemeenschappelijk gedrag is, dit best toch maar op 1 plaats geimplementeerd wordt. Ik zou zeggen kies en zie later waar de beperkingen van die keuze naar boven komen (beide hebben andere beperkingen).

- Bij maken van TaskProxy, krijgt die een realTask of Task(interface) mee?
  - Meerdere lagen proxy's?
  - Vraag aan proxy: 'getDependency()', geeft een Task(interface) terug.

- UUID?
  - UI selecteerd een project uit set<Project> en geeft deze terug. Hoe hier mee verder werken?
    - DataTransferObject, taskwrapper
    - Alle wrappers etc unwrappen in de facade


- Use-Case: Update Task Status
  - Er staat dat we alle tasks moeten tonen, met hun bijhorende project en dat de user er daar eentje uit kiest. Onze tasks hebben echter geen notie van bij welk project ze horen, de project heeft een lijst van tasks, maar de task geef pointer naar het project.
  - Is het OK deze use-case lichtjes aan te passen, dat er eerst eens lijst van projecten getoont wordt, dat de user er ééntje kiest, en dan de tasks van dit project tonen?

- Task / Task status
  - Huidige situatie:
    - Tasks beslist (gebaseerd op dependencies) of hij available of unavailable is bij het opvragen van zijn status (enkel intern gebruikt).
    - Als er op tasks 'finish' aangeroepen wordt, wordt er gevraagd aan het status naar welke andere status er veranderd moet worden. (TaskStatus.finish returned een TaskStatus.) Als er niet gefinished kan worden vanuit een status (bv unavailable) dan returned die gewoon zichzelf.
  - Probleem:
    - Er wordt nu op twee plekken beslist over welkes tatus het project gaat krijgen. Bij dependencies toevoegen beslis de task zelf hierover (welliswaar onrechtstreeks, pas als de status effectief opgevraagd wordt.) En als tweede bij finishen, dan returned de status een nieuwe.
  - Oplossing: (misschien?)
    - Laat gewoon de task altijd beslissen over de status.
    - Als op task 'finish' aangeroepen wordt vraagt die aan de status 'bool canFinish()' en dan kiest de task naar welke nieuwe status er veranderd moet worden.
** Feedback (3.5/4)
   - leesbaarheid van diagramma's
   - sequence diagrams: enkel BINNEN domain.
   - taak status objecten kunnen simpeler!
   - task status dependent behaviour moet ECHT in status
   - apparte klassen voor berekeneningen van tijd. (niet in task)
   - alles kunnen uitleggen als het afhankelijk is van Java (technologisch probleem)
   - null checks in facade op een betere plaats!
   - exceptions maken met juiste semantiek
   - meer op modifiers letten: zo weinig mogelijk visible
* Tweede iteratie
** Eerste sessie
*** Nieuwe dingen
**** Nieuw in domein
    - User (abstract)
      - Developer
      - Project manager
    - Resources
    - ResourceType
    - Reservation
    - Requirement

Beslissingen over domein:
  - Developers en Project managers zijn disjunct
  - Resources kunnen niet opgebruikt worden, enkel gereserveerd.
**** Nieuw in task
     - developers
     - plannes start time
     - duration in MINUTES
     - berekenen: timespan in which to be executed
**** Nieuw in task status
     - executing
     - available VOOR EEN DEVELOPER
**** Al de rest
*** Design problemen
**** Resource reservations
   - Oplossing Syd:
     - Elke task houdt een lijst bij van nodige resourceTYPES
     - Elke resourceTYPE kent al zijn instantiaties
     - Elke een resource houdt al zijn reservaties bij
   - Oplossing Pablo:
     - Reservation Manager die alle reservations bijhoudt.
     - Taak moet daaraan kunnen?
Er zijn twee niveaus van 'available':
- dependencies door taak zelf
- resources (reservations) door reservationmanager

**** Verschillende soorten data nodig voor de statussen. Bv finished/failed hebben een time-period, terwijl de nieuwe executing een developer nodig heeft.
     - Oplossing Pablo: Voeg die specifieke data velden toe aan de statussen zelf.
     - Bv finished heeft een veldje time-period dat aangeeft wanneer er aan de taak gewerkt is. Op de zelfde manier heeft executing een veldje 'developers'.
Ik zou dan in task een variabele Status bij houden, bij het opvragen, als die null is, wordt er gekeken naar de dependencies en dan gekozen tussen avail/unavail.
Maar als die niet null is wordt de huidige gewoon terug gegeven.
Dus weg met de 'isFinal' check, gwn als die toegekend is blijft die.
Zo kunnen we goed de voordelen van het status pattern gebruiken (namelijk specifieke nodige data voor een bepaalde status bij houden, zelfs al verschilt die vans
tatus), en tegelijk de flexibiliteit hebben van het automatisch status bepalen gebaseerd op dependencies.

Status is 'available' voor specifieke user, dus misschien een Login-manager die statisch bijhoudt welke user er ingelogd is.8

**** Rechten van users
 Een Manager mag taken plannen maar een developer niet etc.
 We moeten daar dus ook rekening mee houden in de UI.

 Hier is mijn voorstel:
 Bij het begin van een sessie vraagt de UI aan de sessioncontroller een
 selectUserSession aan. De user selecteert dan een User (via
 UserWrappers). Van daaruit kan de UI sessions aanvragen, en daaraan moet
 hij dan die userWrapper meegeven zodat de sessioncontroller de
 permissions kan checken.

 Wat ook kan is dat we de sessionController de user(Wrapper) laten
 bijhouden en de UI gewoon toelaten die te zetten (lijkt me eigenlijk
 veiliger omdat de UI anders gewoon alle users kan impersoneren).
 In dit scenario moet de UI echt van user veranderen voor die iets anders
 kan doen.

**** Waar zetten we de time keeper, waar houden we time bij zodat het binnen het domein blijft
**** Input file als interface
**** Task kent momenteel alle statussen, is dat nodig? goede argumentatie guys!
     We checken die dependencies nu toch at runtime, dus waarom nog die objecten?
*** Domain vragen:
- Time availability per type of per instance van resource?
  Momenteel per type - OK
** Tweede sessie
*** Planning idee:
    - Pablo
      Undo, redo system
    - Syd
      nieuwe instantiatie van Facade en sessioncontroller met apparte simulation UI

      DIT DOEN
*** Task status idee
    - task status pattern: performedDuring in pattern? want da's status-afhankelijke data

      OK, MAAR geen state pattern want state pattern is stateless
      (idem voor alternative)
      DIT DOEN
*** Session controller idee:
    - Syd:
      Session controller houdt een lijst van sessions bij die overerver van een abstracte klasse session
      UI kan aan die lijst en roept gewoon execute aan op zo'n object.
      gevolg: UI losgekoppeld van individuele sessions.

    - Pablo:
      typ hier

      GEEN VAN BEIDE

*** Reservations
Als een task langer duurt dan verwacht, dan worden zijn resources ook langer gebruikt. Een TaskPlanning zijn period gaat dan ook aangeven dat deze langer geduurd heeft.

* Vragen: 20 april
- Kunnen er meerdere managers zijn, of is er gewoon een 'manager mode' waarin planning gedaan kan worden?
- User access control? User heeft hoop methodes "canDo..." voor elke functionaliteit? Meerdere facade-controllers (per user-soort één)?
- Moet een task-planning wie dat hem geplant heeft?
- Moet de UI geresctricteerd worden gebaseerd op de user?
- Parallelle classe-structuren (data objecten), kan dat beter?
- Planning, specifieke resource vs type.
- TimeCalculator = singleton?
- Geneste simulaties?
